body file control {
	namespace => "cf_elk";
}

bundle agent cf_elk_report_init {
	vars:
		"subdirs" slist => { "log", "state", "work" };

	files:
		"$(sys.workdir)/cf-elk/."
			create => "true",
			perms => default:mog("0700", "root", "root");

		"$(sys.workdir)/cf-elk/$(subdirs)/."
			create => "true",
			perms => default:mog("0700", "root", "root");
}

bundle agent cf_elk_report_cfprocs {
	vars:
		"filename" string => "$(sys.workdir)/cf-elk/work/cf_elk_report_cfprocs.dat";
		"ignore" string => "\s*";

	files:
		"$(filename)"
			create => "true",
			edit_defaults => cf_elk_empty,
			perms => default:mog("0600", "root", "root"),
			edit_line => cf_elk_edit_line_create_cfprocs_state;
	
	methods:
		"$(this.bundle)" usebundle => cf_elk_report_generic_diff("$(this.bundle)");
}

bundle edit_line cf_elk_edit_line_create_cfprocs_state {
	
	vars:
		"d1" int => readstringarrayidx("procs","$(sys.workdir)/state/cf_procs","#[^\n]*", "\n","99999999999", "99999999999");
		"split" slist => splitstring("$(procs[0][0])","\h+","100");
		"cols" int => length("split");
		"indices" slist => getindices("procs");
		"num_ignore_cols" string => format("%d",eval("$(cols)-2", "math", "infix"));
		#"cmd_ignore" string => "\[.*\]";
		"cmd_ignore" string => "\s+";

	classes:
		"matched_$(indices)" expression => regextract("^(\S+)\s+(\S+\s+){$(num_ignore_cols)}(.*)","$(procs[$(indices)][0])","arr_$(indices)");
	
	insert_lines:
			"\"$(arr_$(indices)[1])\",\"$(arr_$(indices)[3])\""
				ifvarclass => not(or(strcmp("$(indices)","0"),regcmp("^$(cmd_ignore)$", "$(arr_$(indices)[3])")));
}

######

bundle agent cf_elk_report_open_ports {

	vars:
		"filename" string => "$(sys.workdir)/cf-elk/work/cf_elk_report_open_ports.dat";
		"ignore" string => "\s*";

	classes:
		"cf_elk_have_monitor_env_data" expression => fileexists("$(sys.workdir)/state/env_data");

	files:
		"$(filename)"
			create => "true",
			edit_defaults => cf_elk_empty,
			perms => default:mog("0600", "root", "root"),
			edit_line => cf_elk_edit_line_create_open_ports_state;
	
	methods:
		"$(this.bundle)" usebundle => cf_elk_report_generic_diff("$(this.bundle)");
}

bundle edit_line cf_elk_edit_line_create_open_ports_state {
	vars:
		"_protos" slist => { "tcp4", "tcp6", "udp4", "udp6" };
		"_$(_protos)_ports" slist => getindices("mon.$(_protos)_port_addr");

	insert_lines:
		"$(_protos),$(_$(_protos)_ports),$(mon.$(_protos)_port_addr[$(_$(_protos)_ports)])"
			ifvarclass => isvariable("mon.$(_protos)_port_addr[$(_$(_protos)_ports)]");
}

##############################################

bundle agent cf_elk_report_allclasses {
	vars:
		"filename" string => "$(sys.workdir)/state/allclasses.txt";
		"ignore" string => "_\S+|Yr\d{4}|Day\d{1,3}|GMT_\S+|Hr\d{2}(_\S{2})?|Min\d{2}(_\d{2})?|any|Afternoon";

	methods:
		"$(this.bundle)" usebundle => cf_elk_report_generic_diff("$(this.bundle)");
}

#######

bundle agent cf_elk_report_software_patches_avail {
	vars:
		"filename" string => "$(sys.workdir)/state/software_patches_avail.csv";
		"ignore" string => "\s*";

	methods:
		"$(this.bundle)" usebundle => cf_elk_report_generic_diff("$(this.bundle)");
}

#######

bundle agent cf_elk_report_software_packages {
	vars:
		"filename" string => "$(sys.workdir)/state/software_packages.csv";
		"ignore" string => "\s*";

	methods:
		"$(this.bundle)" usebundle => cf_elk_report_generic_diff("$(this.bundle)");
}

######


bundle agent cf_elk_report_generic_diff(b) {
	classes:
		any::
			"cf_elk_report_generic_diff_file_exists" expression => fileexists("$($(b).filename)");

		cf_elk_report_generic_diff_file_exists::
			"cf_elk_report_generic_diff_has_size" expression => isgreaterthan(filesize("$($(b).filename)"), "0");


	files:
		cf_elk_report_generic_diff_has_size::
			"$(sys.workdir)/cf-elk/state/$(b).dat.cur"
				copy_from => default:local_dcp("$($(b).filename)"),
				classes => default:if_repaired("$(b)_updated");

			"$(sys.workdir)/cf-elk/log/$(b).log"
				create => "true",
				perms => default:mog("0600","root","root"),
				ifvarclass => "$(b)_updated",
				edit_defaults => cf_elk_no_backup,
				edit_line => cf_elk_edit_line_generic_diff("$(b)");

			"$(sys.workdir)/cf-elk/state/$(b).dat.prev"
				ifvarclass => "$(b)_updated",
				copy_from => default:local_dcp("$(sys.workdir)/cf-elk/state/$(b).dat.cur");
}

bundle edit_line cf_elk_edit_line_generic_diff_old(b) {
	vars:
		"_cur" slist => readstringlist("$(sys.workdir)/cf-elk/state/$(b).dat.cur", "#[^\n]*", "\n", "99999999", "99999999");
		"_prev" slist => readstringlist("$(sys.workdir)/cf-elk/state/$(b).dat.prev", "#[^\n]*", "\n", "99999999", "99999999");
		"_ts" int => now();
		"_ignore" string => "$($(b).ignore)";

	insert_lines:
		"$(_ts),$(b),+,$(_cur)"
			ifvarclass => and(
				not(regcmp("^($(_ignore))$","$(_cur)")),
				not(regline("^$(_cur)$", "$(sys.workdir)/cf-elk/state/$(b).dat.prev"))
			);

		"$(_ts),$(b),-,$(_prev)"
			ifvarclass => and(
				not(regcmp("^($(_ignore))$","$(_prev)")),
				not(regline("^$(_prev)$", "$(sys.workdir)/cf-elk/state/$(b).dat.cur"))
			);
}

bundle edit_line cf_elk_edit_line_generic_diff(b) {
	vars:
		"_cur" slist => readstringlist("$(sys.workdir)/cf-elk/state/$(b).dat.cur", "#[^\n]*", "\n", "99999999", "99999999");
		"_prev" slist => readstringlist("$(sys.workdir)/cf-elk/state/$(b).dat.prev", "#[^\n]*", "\n", "99999999", "99999999");
		"_ts" int => now();
		"_ignore" string => "$($(b).ignore)";

	insert_lines:
		"$(_ts),$(b),+,$(_cur)"
			ifvarclass => and(
				not(regcmp("^($(_ignore))$","$(_cur)")),
				not(regline(concat("^",escape("$(_cur)"),"$"), "$(sys.workdir)/cf-elk/state/$(b).dat.prev"))
			);

		"$(_ts),$(b),-,$(_prev)"
			ifvarclass => and(
				not(regcmp("^($(_ignore))$","$(_prev)")),
				not(regline(concat("^",escape("$(_prev)"),"$"), "$(sys.workdir)/cf-elk/state/$(b).dat.cur"))
			);
}


#####################################

body edit_defaults cf_elk_no_backup {
      edit_backup => "false";
      max_file_size => "99999999999";
}

body edit_defaults cf_elk_empty {
      empty_file_before_editing => "true";
      edit_backup => "false";
      max_file_size => "99999999999";
}
